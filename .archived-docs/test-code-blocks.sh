#!/bin/bash

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –≤ –ø–æ—Å—Ç–∞—Ö"
echo "===================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
echo -e "\n${YELLOW}1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...${NC}"
if [ -z "$AUTH_TOKEN" ]; then
    echo -e "${RED}‚ùå AUTH_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export AUTH_TOKEN='your_token_here'"
    exit 1
fi
echo -e "${GREEN}‚úì –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω${NC}"

# 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –±–ª–æ–∫–æ–º –∫–æ–¥–∞
echo -e "\n${YELLOW}2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –±–ª–æ–∫–æ–º –∫–æ–¥–∞...${NC}"

POST_DATA='{
  "content": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞! üß™\n\n–í–æ—Ç –ø—Ä–∏–º–µ—Ä React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:",
  "metadata": {
    "post_type": "code",
    "code_blocks": [
      {
        "language": "typescript",
        "code": "import React from '\''react'\'';\n\ninterface Props {\n  message: string;\n}\n\nexport const Hello: React.FC<Props> = ({ message }) => {\n  const [count, setCount] = React.useState(0);\n  \n  return (\n    <div>\n      <h1>{message}</h1>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n};"
      }
    ]
  },
  "visibility": "public"
}'

RESPONSE=$(curl -s -X POST http://localhost:8080/api/posts \
  -H "Authorization: Bearer $AUTH_TOKEN" \
  -H "Content-Type: application/json" \
  -d "$POST_DATA")

POST_ID=$(echo $RESPONSE | jq -r '.id')

if [ "$POST_ID" != "null" ] && [ -n "$POST_ID" ]; then
    echo -e "${GREEN}‚úì –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω: ID = $POST_ID${NC}"
    echo "Response: $RESPONSE" | jq '.'
else
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞${NC}"
    echo "Response: $RESPONSE"
    exit 1
fi

# 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ metadata
echo -e "\n${YELLOW}3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞ –∏–∑ –ë–î...${NC}"

GET_RESPONSE=$(curl -s http://localhost:8080/api/posts/$POST_ID \
  -H "Authorization: Bearer $AUTH_TOKEN")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ code_blocks –≤ metadata
CODE_BLOCKS=$(echo $GET_RESPONSE | jq -r '.metadata.code_blocks')

if [ "$CODE_BLOCKS" != "null" ]; then
    echo -e "${GREEN}‚úì code_blocks –Ω–∞–π–¥–µ–Ω—ã –≤ metadata${NC}"
    echo "Code blocks:" | jq '.'
    echo $CODE_BLOCKS | jq '.'
else
    echo -e "${RED}‚ùå code_blocks –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ metadata${NC}"
    echo "Full response:"
    echo $GET_RESPONSE | jq '.'
fi

# 4. –ü–æ–ª—É—á–µ–Ω–∏–µ timeline –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
echo -e "\n${YELLOW}4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ timeline...${NC}"

TIMELINE_RESPONSE=$(curl -s "http://localhost:8080/api/timeline/explore?limit=1" \
  -H "Authorization: Bearer $AUTH_TOKEN")

FIRST_POST=$(echo $TIMELINE_RESPONSE | jq '.[0]')
TIMELINE_CODE_BLOCKS=$(echo $FIRST_POST | jq -r '.metadata.code_blocks')

if [ "$TIMELINE_CODE_BLOCKS" != "null" ]; then
    echo -e "${GREEN}‚úì code_blocks –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ timeline${NC}"
else
    echo -e "${YELLOW}‚ö† code_blocks –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–≤–æ–º –ø–æ—Å—Ç–µ timeline${NC}"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ –≤–∞—à –ø–æ—Å—Ç"
fi

# 5. –°–æ–∑–¥–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ overflow
echo -e "\n${YELLOW}5. –¢–µ—Å—Ç —Å –¥–ª–∏–Ω–Ω—ã–º –∫–æ–¥–æ–º (overflow check)...${NC}"

LONG_POST_DATA='{
  "content": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫:",
  "metadata": {
    "code_blocks": [
      {
        "language": "javascript",
        "code": "const veryLongVariableName = '\''thisIsAVeryLongStringWithoutAnySpacesOrBreaksThatShouldBeHandledProperlyByTheWordBreakCSS'\'';\nconst anotherVeryLongLineOfCodeThatGoesOnAndOnWithoutAnyBreaksOrSpacesToTestTheHorizontalScrollingAndWordWrapping = true;\nfunction veryLongFunctionNameThatIsUnreasonablyLongButShouldStillBeHandledCorrectly() { return '\''test'\''; }"
      }
    ]
  }
}'

LONG_RESPONSE=$(curl -s -X POST http://localhost:8080/api/posts \
  -H "Authorization: Bearer $AUTH_TOKEN" \
  -H "Content-Type: application/json" \
  -d "$LONG_POST_DATA")

LONG_POST_ID=$(echo $LONG_RESPONSE | jq -r '.id')

if [ "$LONG_POST_ID" != "null" ]; then
    echo -e "${GREEN}‚úì –î–ª–∏–Ω–Ω—ã–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω: ID = $LONG_POST_ID${NC}"
else
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞${NC}"
fi

# –ò—Ç–æ–≥–∏
echo -e "\n${GREEN}================================${NC}"
echo -e "${GREEN}‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
echo -e "${GREEN}================================${NC}"
echo ""
echo "–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:"
echo "  1. –û–±—ã—á–Ω—ã–π –∫–æ–¥: $POST_ID"
echo "  2. –î–ª–∏–Ω–Ω—ã–π –∫–æ–¥: $LONG_POST_ID"
echo ""
echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:"
echo "  - http://localhost:5173/home"
echo "  - –û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ—Å—Ç $POST_ID"
echo "  - –ë–ª–æ–∫ –∫–æ–¥–∞ –¥–æ–ª–∂–µ–Ω:"
echo "    ‚úì –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π"
echo "    ‚úì –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
echo "    ‚úì –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏"
echo ""
