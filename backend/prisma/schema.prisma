// Prisma Schema д��я Tyrian Trade Backend

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USERS & AUTHENTICATION
// ============================================

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  
  // Profile
  firstName     String?  @map("first_name")
  lastName      String?  @map("last_name")
  displayName   String?  @map("display_name")
  username      String   @unique
  bio           String?  @db.Text
  avatar        String?
  coverImage    String?  @map("cover_image")
  location      String?
  website       String?
  role          String?
  sectors       String[] // Trading sectors
  
  // GoToSocial sync
  gtsAccountId  String?  @unique @map("gts_account_id")
  gtsSyncedAt   DateTime? @map("gts_synced_at")
  
  // Status
  emailVerified Boolean  @default(false) @map("email_verified")
  isActive      Boolean  @default(true) @map("is_active")
  isBanned      Boolean  @default(false) @map("is_banned")
  
  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  lastLoginAt   DateTime? @map("last_login_at")
  
  // Relations
  settings            UserSettings?
  stripeConnectAccount StripeConnectAccount?
  stripeCustomer      StripeCustomer?
  notificationSettings NotificationSettings?
  apiKeys             ApiKey[]
  kycVerification     KycVerification?
  referrals           Referral[]       @relation("UserReferrals")
  referredBy          Referral?        @relation("ReferredUser")
  transactions        Transaction[]
  payouts             Payout[]
  subscriptions       Subscription[]   @relation("UserSubscriptions")
  subscribers         Subscription[]   @relation("SubscribedTo")
  emailVerificationTokens EmailVerificationToken[]
  passwordResetTokens PasswordResetToken[]

  // Social media relations
  posts                Post[]         @relation("UserPosts")
  favourites           Favourite[]    @relation("UserFavourites")
  reblogs              Reblog[]       @relation("UserReblogs")
  bookmarks            Bookmark[]     @relation("UserBookmarks")
  followers            Follow[]       @relation("Followers")
  following            Follow[]       @relation("Following")
  notifications        Notification[] @relation("UserNotifications")
  notificationsFrom    Notification[] @relation("NotificationsFrom")

  @@map("users")
}

// Email verification tokens
model EmailVerificationToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("email_verification_tokens")
}

// Password reset tokens
model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("password_reset_tokens")
}

model UserSettings {
  id     String @id @default(uuid())
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Privacy
  profileVisibility String @default("public") // public, followers, private
  showEmail         Boolean @default(false)
  showLocation      Boolean @default(true)
  
  // Language & Region
  language          String @default("en")
  timezone          String @default("UTC")
  currency          String @default("USD")
  
  // Other preferences (JSON)
  preferences       Json?
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("user_settings")
}

// ============================================
// STRIPE INTEGRATION
// ============================================

// Stripe Connect для авторов (продавцов)
model StripeConnectAccount {
  id     String @id @default(uuid())
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Stripe Connect Account ID
  stripeAccountId String @unique @map("stripe_account_id")

  // Account details
  email              String?
  country            String?
  defaultCurrency    String? @map("default_currency")

  // Capabilities
  chargesEnabled     Boolean @default(false) @map("charges_enabled")
  payoutsEnabled     Boolean @default(false) @map("payouts_enabled")
  detailsSubmitted   Boolean @default(false) @map("details_submitted")

  // OAuth
  accessToken        String? @map("access_token") @db.Text
  refreshToken       String? @map("refresh_token") @db.Text
  scope              String?

  // Status
  isActive           Boolean @default(true) @map("is_active")

  // Metadata
  metadata           Json?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("stripe_connect_accounts")
}

// Stripe Customer для покупателей
model StripeCustomer {
  id     String @id @default(uuid())
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Stripe Customer ID
  stripeCustomerId String @unique @map("stripe_customer_id")

  // Customer details
  email           String?
  name            String?

  // Default payment method
  defaultPaymentMethodId String? @map("default_payment_method_id")

  // Status
  isActive        Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  paymentMethods PaymentMethod[]

  @@map("stripe_customers")
}

// Payment Methods (карты покупателей)
model PaymentMethod {
  id               String @id @default(uuid())
  stripeCustomerId String @map("stripe_customer_id")
  customer         StripeCustomer @relation(fields: [stripeCustomerId], references: [id], onDelete: Cascade)

  // Stripe Payment Method ID
  paymentMethodId String @unique @map("payment_method_id")

  // Card details
  type            String // card, bank_account
  brand           String? // visa, mastercard, etc.
  last4           String?
  expMonth        Int? @map("exp_month")
  expYear         Int? @map("exp_year")

  // Status
  isDefault       Boolean @default(false) @map("is_default")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([stripeCustomerId])
  @@map("payment_methods")
}

// ============================================
// NOTIFICATIONS
// ============================================

model NotificationSettings {
  id     String @id @default(uuid())
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Sound & Desktop
  enableSound            Boolean @default(true) @map("enable_sound")
  showDesktop            Boolean @default(true) @map("show_desktop")
  
  // Email Notifications
  emailOnFollow          Boolean @default(false) @map("email_on_follow")
  emailOnMention         Boolean @default(true) @map("email_on_mention")
  emailOnComment         Boolean @default(true) @map("email_on_comment")
  emailOnLike            Boolean @default(true) @map("email_on_like")
  emailOnNewPost         Boolean @default(true) @map("email_on_new_post")
  emailSuspiciousLogin   Boolean @default(true) @map("email_suspicious_login")
  
  // Web Notifications
  webOnFollow            Boolean @default(true) @map("web_on_follow")
  webOnMention           Boolean @default(true) @map("web_on_mention")
  webOnComment           Boolean @default(true) @map("web_on_comment")
  webOnLike              Boolean @default(true) @map("web_on_like")
  webOnNewPost           Boolean @default(true) @map("web_on_new_post")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("notification_settings")
}

// ============================================
// API KEYS
// ============================================

model ApiKey {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name        String
  key         String   @unique
  keyHash     String   @map("key_hash") // Bcrypt hash
  
  // Permissions
  scopes      String[] // read:profile, write:posts, etc.
  
  // Rate limiting
  rateLimit   Int      @default(1000) @map("rate_limit") // requests per hour
  
  // Status
  isActive    Boolean  @default(true) @map("is_active")
  
  // Usage tracking
  lastUsedAt  DateTime? @map("last_used_at")
  totalRequests Int    @default(0) @map("total_requests")
  
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@index([userId])
  @@map("api_keys")
}

// ============================================
// KYC VERIFICATION
// ============================================

model KycVerification {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Verification status
  status    String   @default("pending") // pending, approved, rejected
  level     String   @default("none") // none, basic, advanced
  
  // Personal info
  fullName        String? @map("full_name")
  dateOfBirth     DateTime? @map("date_of_birth")
  nationality     String?
  address         String?
  city            String?
  postalCode      String? @map("postal_code")
  country         String?
  
  // Documents
  documentType    String? @map("document_type") // passport, id_card, driver_license
  documentNumber  String? @map("document_number")
  documentFront   String? @map("document_front") // S3 URL
  documentBack    String? @map("document_back") // S3 URL
  selfieUrl       String? @map("selfie_url") // S3 URL
  
  // Verification
  verifiedBy      String? @map("verified_by") // Admin user ID
  verifiedAt      DateTime? @map("verified_at")
  rejectionReason String? @map("rejection_reason") @db.Text
  
  // Metadata
  ipAddress       String? @map("ip_address")
  userAgent       String? @map("user_agent")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("kyc_verifications")
}

// ============================================
// REFERRALS
// ============================================

model Referral {
  id            String   @id @default(uuid())
  referrerId    String   @map("referrer_id")
  referrer      User     @relation("UserReferrals", fields: [referrerId], references: [id], onDelete: Cascade)
  
  referredId    String?  @unique @map("referred_id")
  referred      User?    @relation("ReferredUser", fields: [referredId], references: [id], onDelete: SetNull)
  
  // Referral code
  code          String   @unique
  
  // Tracking
  clicks        Int      @default(0)
  signups       Int      @default(0)
  
  // Revenue share
  revenueShared Decimal  @default(0) @map("revenue_shared") @db.Decimal(10, 2)
  commission    Decimal  @default(0) @db.Decimal(5, 2) // Percentage
  
  // Status
  isActive      Boolean  @default(true) @map("is_active")
  
  expiresAt     DateTime? @map("expires_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  @@index([referrerId])
  @@map("referrals")
}

// ============================================
// MONETIZATION
// ============================================

model Transaction {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Transaction details
  type            String   // subscription, post_purchase, tip, payout
  amount          Decimal  @db.Decimal(10, 2)
  currency        String   @default("USD")
  fee             Decimal  @default(0) @db.Decimal(10, 2)
  netAmount       Decimal  @map("net_amount") @db.Decimal(10, 2)
  
  // Payment
  stripePaymentId String?  @map("stripe_payment_id")
  paymentMethod   String?  @map("payment_method") // card, bank, crypto
  
  // Status
  status          String   @default("pending") // pending, completed, failed, refunded
  
  // Metadata
  description     String?
  metadata        Json?
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@index([userId])
  @@index([status])
  @@map("transactions")
}

model Payout {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Payout details
  amount        Decimal  @db.Decimal(10, 2)
  currency      String   @default("USD")
  method        String   // stripe, bank_transfer, crypto
  
  // Destination
  destination   String   // Bank account, wallet address
  
  // Status
  status        String   @default("pending") // pending, processing, completed, failed
  
  // Stripe
  stripePayoutId String? @map("stripe_payout_id")
  
  // Processing
  processedAt   DateTime? @map("processed_at")
  failureReason String?  @map("failure_reason") @db.Text
  
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  @@index([userId])
  @@index([status])
  @@map("payouts")
}

model Subscription {
  id              String   @id @default(uuid())
  subscriberId    String   @map("subscriber_id")
  subscriber      User     @relation("UserSubscriptions", fields: [subscriberId], references: [id], onDelete: Cascade)
  
  subscribedToId  String   @map("subscribed_to_id")
  subscribedTo    User     @relation("SubscribedTo", fields: [subscribedToId], references: [id], onDelete: Cascade)
  
  // Subscription tier
  tier            String   @default("basic") // basic, premium, pro
  price           Decimal  @db.Decimal(10, 2)
  currency        String   @default("USD")
  interval        String   @default("monthly") // monthly, yearly
  
  // Stripe
  stripeSubscriptionId String? @unique @map("stripe_subscription_id")
  
  // Status
  status          String   @default("active") // active, canceled, expired, paused
  
  // Billing
  currentPeriodStart DateTime @map("current_period_start")
  currentPeriodEnd   DateTime @map("current_period_end")
  canceledAt         DateTime? @map("canceled_at")
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@unique([subscriberId, subscribedToId])
  @@index([subscriberId])
  @@index([subscribedToId])
  @@map("subscriptions")
}

// ============================================
// ANALYTICS
// ============================================

model AnalyticsEvent {
  id        String   @id @default(uuid())
  userId    String?  @map("user_id")
  
  // Event
  event     String
  category  String?
  label     String?
  value     Int?
  
  // Session
  sessionId String?  @map("session_id")
  
  // Context
  page      String?
  referrer  String?
  userAgent String?  @map("user_agent")
  ipAddress String?  @map("ip_address")
  
  // Metadata
  metadata  Json?
  
  createdAt DateTime @default(now()) @map("created_at")
  
  @@index([userId])
  @@index([event])
  @@index([createdAt])
  @@map("analytics_events")
}
