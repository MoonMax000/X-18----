#!/bin/bash

echo "üîç –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
echo "=================================="
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω
if ! curl -s http://localhost:8080/health > /dev/null 2>&1; then
    echo "‚ùå Backend –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080"
    exit 1
fi

echo "‚úÖ Backend –∑–∞–ø—É—â–µ–Ω"
echo ""

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN=$(grep VITE_AUTH_TOKEN .env.local | cut -d'"' -f2)

if [ -z "$TOKEN" ]; then
    echo "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.local"
    exit 1
fi

echo "‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: ${TOKEN:0:20}..."
echo ""

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
echo "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
CURRENT_USER=$(curl -s http://localhost:8080/api/users/me \
    -H "Authorization: Bearer $TOKEN" | jq -r '.id // "null"')

if [ "$CURRENT_USER" = "null" ]; then
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π!"
    echo "–û—Ç–≤–µ—Ç API:"
    curl -s http://localhost:8080/api/users/me -H "Authorization: Bearer $TOKEN" | jq
    exit 1
fi

echo "‚úÖ User ID: $CURRENT_USER"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ë–î
echo "2Ô∏è‚É£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:"
psql -d x18_backend -t -c "
SELECT 
    n.id,
    n.type,
    n.from_user_id,
    n.read,
    n.created_at,
    u.username as from_user_username,
    u.display_name as from_user_display_name
FROM notifications n
LEFT JOIN users u ON n.from_user_id = u.id
WHERE n.user_id = '$CURRENT_USER'
ORDER BY n.created_at DESC
LIMIT 3;" 2>/dev/null || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î"

echo ""

# –ó–∞–ø—Ä–æ—Å –∫ API —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
echo "3Ô∏è‚É£ –û—Ç–≤–µ—Ç API /api/notifications:"
NOTIF_RESPONSE=$(curl -s "http://localhost:8080/api/notifications?limit=3" \
    -H "Authorization: Bearer $TOKEN")

echo "$NOTIF_RESPONSE" | jq

echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
echo "4Ô∏è‚É£ –î–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
echo "$NOTIF_RESPONSE" | jq '.notifications[0] | {
    id,
    type,
    actor_id,
    actor: (.actor | {
        id,
        username,
        display_name,
        avatar_url
    }),
    is_read,
    created_at
}'

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ compiled binary
echo "5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ backend:"
BACKEND_MODIFIED=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" custom-backend/cmd/server/main.go 2>/dev/null || stat -c "%y" custom-backend/cmd/server/main.go 2>/dev/null | cut -d'.' -f1)
BINARY_DATE=$(ps aux | grep "custom-backend" | grep -v grep | awk '{print $9, $10}' | head -1)

echo "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ main.go: $BACKEND_MODIFIED"
echo "Backend –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω: $BINARY_DATE"
echo ""

# –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º backend –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
echo "6Ô∏è‚É£ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ backend —Å –Ω–æ–≤—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏:"
cd custom-backend
echo "–ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º..."
go build -o bin/server cmd/server/main.go
cd ..

if [ $? -eq 0 ]; then
    echo "‚úÖ Backend —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω"
    echo ""
    echo "‚ö†Ô∏è –í–ê–ñ–ù–û: –ù—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å backend, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É!"
    echo "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: ./STOP_CUSTOM_BACKEND_STACK.sh && ./START_CUSTOM_BACKEND_STACK.sh"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ backend"
fi

echo ""
echo "=================================="
echo "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
