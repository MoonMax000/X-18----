// Converters from custom-backend types to GoToSocial types for UI compatibility
import type { User, Post } from '@/services/api/custom-backend';
import type { GTSAccount, GTSStatus } from '@/services/api/gotosocial';
import { getAvatarUrl, getCoverUrl } from '@/lib/avatar-utils';

export function convertUserToGTSAccount(user: User): GTSAccount {
  return {
    id: user.id,
    username: user.username,
    acct: user.username,
    display_name: user.display_name || user.username,
    locked: user.private_account || false,
    bot: false,
    discoverable: !user.private_account,
    group: false,
    created_at: user.created_at,
    note: user.bio || '',
    url: `/profile/${user.username}`,
    avatar: getAvatarUrl(user),
    avatar_static: getAvatarUrl(user),
    header: getCoverUrl(user.header_url),
    header_static: getCoverUrl(user.header_url),
    followers_count: user.followers_count || 0,
    following_count: user.following_count || 0,
    statuses_count: user.posts_count || 0,
    last_status_at: user.updated_at || user.created_at,
    emojis: [],
    fields: [],
  };
}

export function convertPostToGTSStatus(post: Post): GTSStatus {
  const user = post.user;
  
  return {
    id: post.id,
    created_at: post.created_at,
    edited_at: post.updated_at || null,
    in_reply_to_id: null,
    in_reply_to_account_id: null,
    sensitive: false,
    spoiler_text: '',
    visibility: (post.visibility === 'followers' ? 'private' : post.visibility) as 'public' | 'private' | 'unlisted' | 'direct',
    language: 'en',
    uri: `/posts/${post.id}`,
    url: `/posts/${post.id}`,
    replies_count: post.replies_count || 0,
    reblogs_count: post.retweets_count || 0,
    favourites_count: post.likes_count || 0,
    favourited: post.is_liked || false,
    reblogged: post.is_retweeted || false,
    bookmarked: post.is_bookmarked || false,
    content: post.content || '',
    reblog: null,
    account: user ? convertUserToGTSAccount(user) : {
      id: post.user_id,
      username: 'unknown',
      acct: 'unknown',
      display_name: 'Unknown User',
      locked: false,
      bot: false,
      discoverable: true,
      group: false,
      created_at: new Date().toISOString(),
      note: '',
      url: '',
      avatar: getAvatarUrl({ avatar_url: '', username: 'unknown' } as User),
      avatar_static: getAvatarUrl({ avatar_url: '', username: 'unknown' } as User),
      header: getCoverUrl(''),
      header_static: getCoverUrl(''),
      followers_count: 0,
      following_count: 0,
      statuses_count: 0,
      last_status_at: new Date().toISOString(),
      emojis: [],
      fields: [],
    },
    media_attachments: (post.media_urls || []).map((url, index) => ({
      id: `${post.id}-media-${index}`,
      type: 'image' as const,
      url,
      preview_url: url,
      remote_url: null,
      text_url: null,
      meta: {},
      description: null,
      blurhash: null,
    })),
    mentions: [],
    tags: [],
    emojis: [],
    card: null,
    poll: null,
  };
}
