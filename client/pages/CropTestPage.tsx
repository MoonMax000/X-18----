import { useState, useEffect } from "react";
import { MediaEditor } from "../components/CreatePostBox/MediaEditor";
import { MediaGrid } from "../components/CreatePostBox/MediaGrid";
import { MediaItem } from "../components/CreatePostBox/types";

type AspectPreset = "original" | "wide" | "square";

export default function CropTestPage() {
  const [media, setMedia] = useState<MediaItem[]>([]);
  const [editingMedia, setEditingMedia] = useState<MediaItem | null>(null);
  const [logs, setLogs] = useState<string[]>([]);

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs((prev) => [...prev, `[${timestamp}] ${message}`]);
    console.log(`[CROP TEST] ${message}`);
  };

  useEffect(() => {
    addLog("üé® –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫—Ä–æ–ø–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
  }, []);

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files || files.length === 0) return;

    addLog(`üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);

    Array.from(files).forEach((file) => {
      if (!file.type.startsWith("image/")) {
        addLog(`‚ùå –§–∞–π–ª ${file.name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º`);
        return;
      }

      const reader = new FileReader();
      reader.onload = (event) => {
        const url = event.target?.result as string;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const img = new Image();
        img.onload = () => {
          const aspectRatio = img.naturalWidth / img.naturalHeight;
          let autoPreset: AspectPreset = "square";
          
          if (aspectRatio >= 1.5) {
            autoPreset = "wide";
            addLog(`üìê ${file.name}: ${img.naturalWidth}√ó${img.naturalHeight} (–ø–µ–π–∑–∞–∂) ‚Üí auto-preset: Wide`);
          } else if (aspectRatio <= 0.8) {
            autoPreset = "original";
            addLog(`üìê ${file.name}: ${img.naturalWidth}√ó${img.naturalHeight} (–ø–æ—Ä—Ç—Ä–µ—Ç) ‚Üí auto-preset: Original`);
          } else {
            autoPreset = "square";
            addLog(`üìê ${file.name}: ${img.naturalWidth}√ó${img.naturalHeight} (–∫–≤–∞–¥—Ä–∞—Ç) ‚Üí auto-preset: Square`);
          }

          const newMedia: MediaItem = {
            id: `${Date.now()}-${Math.random()}`,
            type: "image",
            url,
            file,
          };

          setMedia((prev) => [...prev, newMedia]);
          addLog(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${file.name} –¥–æ–±–∞–≤–ª–µ–Ω–æ (ID: ${newMedia.id.substring(0, 8)}...)`);
        };
        img.src = url;
      };
      reader.readAsDataURL(file);
    });

    e.target.value = "";
  };

  const handleEdit = (item: MediaItem) => {
    addLog(`‚úèÔ∏è –û—Ç–∫—Ä—ã—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${item.id.substring(0, 8)}...`);
    setEditingMedia(item);
  };

  const handleSave = (updatedMedia: MediaItem) => {
    addLog(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è ${updatedMedia.id.substring(0, 8)}...`);
    
    if (updatedMedia.transform) {
      const t = updatedMedia.transform;
      addLog(`   üìä Transform: zoom=${t.scale.toFixed(2)}, x=${t.translateX.toFixed(0)}px, y=${t.translateY.toFixed(0)}px`);
      addLog(`   üìê Aspect: ${t.aspectRatio}`);
      if (t.cropRect) {
        addLog(`   ‚úÇÔ∏è Crop: x=${t.cropRect.x}, y=${t.cropRect.y}, w=${t.cropRect.w}, h=${t.cropRect.h}`);
      }
    }

    setMedia((prev) =>
      prev.map((item) =>
        item.id === updatedMedia.id ? updatedMedia : item
      )
    );
    setEditingMedia(null);
    addLog(`‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
  };

  const handleRemove = (mediaId: string) => {
    addLog(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${mediaId.substring(0, 8)}...`);
    setMedia((prev) => prev.filter((item) => item.id !== mediaId));
  };

  const handleReorder = (fromIndex: number, toIndex: number) => {
    addLog(`üîÑ –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞: –ø–æ–∑–∏—Ü–∏—è ${fromIndex} ‚Üí –ø–æ–∑–∏—Ü–∏—è ${toIndex}`);
    setMedia((prev) => {
      const newMedia = [...prev];
      const [movedItem] = newMedia.splice(fromIndex, 1);
      newMedia.splice(toIndex, 0, movedItem);
      return newMedia;
    });
  };

  const clearLogs = () => {
    setLogs([]);
    addLog("üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã");
  };

  const clearMedia = () => {
    addLog(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (${media.length} —à—Ç.)`);
    setMedia([]);
  };

  return (
    <div className="min-h-screen bg-[#0C1014] text-white">
      <div className="mx-auto max-w-6xl p-6">
        {/* Header */}
        <div className="mb-8">
          <h1 className="mb-2 text-3xl font-bold">
            üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∫—Ä–æ–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
          </h1>
          <p className="text-[#808283]">
            –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π –∫—Ä–æ–ø–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          </p>
        </div>

        {/* Features Info */}
        <div className="mb-6 grid gap-4 md:grid-cols-3">
          <div className="rounded-2xl border border-[#181B22] bg-white/5 p-4">
            <div className="mb-2 text-2xl">üéØ</div>
            <h3 className="mb-1 font-semibold">–ê–≤—Ç–æ–≤—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞</h3>
            <p className="text-xs text-[#808283]">
              –ü–µ–π–∑–∞–∂ (‚â•1.5) ‚Üí Wide<br />
              –ü–æ—Ä—Ç—Ä–µ—Ç (‚â§0.8) ‚Üí Original<br />
              –ö–≤–∞–¥—Ä–∞—Ç ‚Üí Square
            </p>
          </div>
          <div className="rounded-2xl border border-[#181B22] bg-white/5 p-4">
            <div className="mb-2 text-2xl">üíæ</div>
            <h3 className="mb-1 font-semibold">–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è</h3>
            <p className="text-xs text-[#808283]">
              –ö–∞–∂–¥—ã–π –ø—Ä–µ—Å–µ—Ç —Ö—Ä–∞–Ω–∏—Ç —Å–≤–æ–π zoom –∏ –ø–æ–∑–∏—Ü–∏—é –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
            </p>
          </div>
          <div className="rounded-2xl border border-[#181B22] bg-white/5 p-4">
            <div className="mb-2 text-2xl">üñºÔ∏è</div>
            <h3 className="mb-1 font-semibold">–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π preview</h3>
            <p className="text-xs text-[#808283]">
              1 —Ñ–æ—Ç–æ: –ø–æ–ª–Ω–æ–µ<br />
              –ù–µ—Å–∫–æ–ª—å–∫–æ: —Å–µ—Ç–∫–∞ 16:9
            </p>
          </div>
        </div>

        {/* Upload Section */}
        <div className="mb-6 rounded-2xl border border-[#181B22] bg-white/5 p-6">
          <h2 className="mb-4 text-xl font-semibold">üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h2>
          <div className="flex gap-3">
            <label className="flex-1 cursor-pointer">
              <input
                type="file"
                accept="image/*"
                multiple
                onChange={handleFileSelect}
                className="hidden"
              />
              <div className="rounded-xl border-2 border-dashed border-[#1D9BF0] bg-[#1D9BF0]/10 px-6 py-8 text-center transition-colors hover:bg-[#1D9BF0]/20">
                <div className="mb-2 text-4xl">üìÅ</div>
                <p className="font-semibold text-[#1D9BF0]">
                  –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                </p>
                <p className="mt-1 text-xs text-[#808283]">
                  –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                </p>
              </div>
            </label>
          </div>

          {media.length > 0 && (
            <div className="mt-4 flex gap-3">
              <button
                onClick={clearMedia}
                className="rounded-full bg-[#EF454A]/20 px-4 py-2 text-sm font-semibold text-[#EF454A] transition-colors hover:bg-[#EF454A]/30"
              >
                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              </button>
              <div className="flex-1 text-right text-sm text-[#808283]">
                –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {media.length} {media.length === 1 ? "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" : "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"}
              </div>
            </div>
          )}
        </div>

        {/* Media Grid Preview */}
        {media.length > 0 && (
          <div className="mb-6 rounded-2xl border border-[#181B22] bg-white/5 p-6">
            <h2 className="mb-4 text-xl font-semibold">üñºÔ∏è Preview (MediaGrid)</h2>
            <MediaGrid
              media={media}
              onRemove={handleRemove}
              onEdit={handleEdit}
              onReorder={handleReorder}
            />
          </div>
        )}

        {/* Logs Section */}
        <div className="rounded-2xl border border-[#181B22] bg-white/5 p-6">
          <div className="mb-4 flex items-center justify-between">
            <h2 className="text-xl font-semibold">üìã –õ–æ–≥–∏ ({logs.length})</h2>
            <button
              onClick={clearLogs}
              className="rounded-full bg-white/10 px-4 py-2 text-sm font-semibold transition-colors hover:bg-white/20"
            >
              üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
            </button>
          </div>
          <div className="max-h-[400px] overflow-y-auto rounded-xl bg-black/50 p-4 font-mono text-xs">
            {logs.length === 0 ? (
              <div className="text-center text-[#808283]">
                –õ–æ–≥–∏ –ø—É—Å—Ç—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
              </div>
            ) : (
              logs.map((log, index) => (
                <div
                  key={index}
                  className="border-b border-white/5 py-1 last:border-0"
                >
                  {log}
                </div>
              ))
            )}
          </div>
        </div>

        {/* Instructions */}
        <div className="mt-6 rounded-2xl border border-[#A06AFF]/30 bg-[#A06AFF]/10 p-6">
          <h3 className="mb-3 text-lg font-semibold">üí° –ö–∞–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:</h3>
          <ol className="space-y-2 text-sm">
            <li>1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (–ø–µ–π–∑–∞–∂, –ø–æ—Ä—Ç—Ä–µ—Ç, –∫–≤–∞–¥—Ä–∞—Ç)</li>
            <li>2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∞–≤—Ç–æ–≤—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏)</li>
            <li>3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "Edit" –Ω–∞ –ª—é–±–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏</li>
            <li>4Ô∏è‚É£ –í —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ: –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É –ø—Ä–µ—Å–µ—Ç–∞–º–∏, –º–µ–Ω—è–π—Ç–µ zoom –∏ –ø–æ–∑–∏—Ü–∏—é</li>
            <li>5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–∞–∂–¥—ã–π –ø—Ä–µ—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ</li>
            <li>6Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ preview –≤ MediaGrid</li>
            <li>7Ô∏è‚É£ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</li>
          </ol>
        </div>
      </div>

      {/* Media Editor Modal */}
      {editingMedia && (
        <MediaEditor
          media={editingMedia}
          onSave={handleSave}
          onClose={() => {
            addLog(`‚ùå –†–µ–¥–∞–∫—Ç–æ—Ä –∑–∞–∫—Ä—ã—Ç –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è`);
            setEditingMedia(null);
          }}
        />
      )}
    </div>
  );
}
